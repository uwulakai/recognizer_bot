# -*- coding: utf-8 -*-

import os
from io import BytesIO
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from recognizer import GeminiRecognizer
import asyncio

load_dotenv()

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()
recognizer = GeminiRecognizer()

async def create_settings_keyboard(chat_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    builder = InlineKeyboardBuilder()
    current_state = recognizer.get_preprocessing_state(chat_id)
    
    builder.button(
        text=f"–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ {'‚úÖ' if current_state else '‚ùé'}",
        callback_data=f"toggle_preprocessing_{chat_id}"
    )
    return builder.as_markup()

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    text = (
        "üëã *–ü—Ä–∏–≤–µ—Ç!*\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∑–∞ —Å–µ–∫—É–Ω–¥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π/–ø–µ—á–∞—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ\n\n"
        "*–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ üì∏*\n\n"
        "*–ö–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ* –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π\n\n"
        "*–ï—Å–ª–∏ —Ç–≤–æ–µ —Ñ–æ—Ç–æ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ, –≤–∫–ª—é—á–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É* ‚Äî —ç—Ç–æ —É–ª—É—á—à–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, "
        "–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–º–µ–¥–ª–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É\n"
        "–ï—Å–ª–∏ —Å —Ñ–æ—Ç–æ *–≤—Å—ë –û–ö ‚Äî –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏*"
    )

    await message.reply(
        text,
        parse_mode="Markdown",
        reply_markup=await create_settings_keyboard(message.chat.id)
    )

@dp.callback_query(F.data.startswith("toggle_preprocessing_"))
async def toggle_preprocessing(callback: types.CallbackQuery):
    chat_id = int(callback.data.split("_")[-1])
    new_state = not recognizer.get_preprocessing_state(chat_id)
    recognizer.set_preprocessing(chat_id, new_state)
    
    await callback.message.edit_reply_markup(
        reply_markup=await create_settings_keyboard(chat_id)
    )
    await callback.answer(f"–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ {'–≤–∫–ª—é—á–µ–Ω–∞' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")

@dp.message(F.photo | F.document)
async def handle_photo(message: types.Message):
    msg = await message.reply("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        
        image_data = BytesIO()
        await bot.download_file(file.file_path, image_data)
        image_data.seek(0)

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await recognizer.recognize_handwriting(
            image_data, message.chat.id
        )
        
        await msg.edit_text(
            f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{result}",
            reply_markup=await create_settings_keyboard(message.chat.id)
        )

    except Exception as e:
        await msg.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())